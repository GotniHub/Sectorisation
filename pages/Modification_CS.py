import streamlit as st
import pandas as pd
from db_connection import get_connection, update_database, check_table_empty

def load_data_from_database():
    """Charge les donn√©es actuelles depuis la base de donn√©es MySQL (table RH)."""
    conn = get_connection()
    if conn is None:
        st.error("‚ùå Erreur de connexion √† la base de donn√©es.")
        return pd.DataFrame()

    try:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM rh")
        columns = [col[0] for col in cursor.description]
        data = cursor.fetchall()
        df = pd.DataFrame(data, columns=columns)
        return df
    except Exception as e:
        st.error(f"‚ùå Erreur lors du chargement des donn√©es RH : {e}")
        return pd.DataFrame()
    finally:
        cursor.close()
        conn.close()


def update_selected_rows(selected_rows):
    """Met √† jour les lignes s√©lectionn√©es dans la base de donn√©es."""
    if selected_rows.empty:
        st.warning("‚ö†Ô∏è Aucune ligne s√©lectionn√©e pour modification.")
        return
    
    update_database(selected_rows)
    st.success("‚úÖ Modifications enregistr√©es avec succ√®s !")

def delete_rows_from_database(codes_secteurs):
    """Supprime les lignes s√©lectionn√©es via leurs codes secteurs."""
    conn = get_connection()
    if conn:
        cursor = conn.cursor()
        try:
            for code in codes_secteurs:
                cursor.execute("DELETE FROM rh WHERE Code_secteur = %s", (code,))
            conn.commit()
            st.success(f"üóëÔ∏è {len(codes_secteurs)} ligne(s) supprim√©e(s) avec succ√®s.")
        except Exception as e:
            conn.rollback()
            st.error(f"‚ùå Erreur lors de la suppression : {e}")
        finally:
            cursor.close()
            conn.close()

def main():
    st.title("‚úèÔ∏è Modifier les donn√©es des Chefs de Secteurs")
        # V√©rifie la connexion et affiche un message
    conn = get_connection()
    if conn:
        st.success("‚úÖüîåConnexion √† la base de donn√©es r√©ussie !")
        conn.close()  # ok ici, c'√©tait juste pour test
    # Initialisation des √©tats
    # Initialiser les variables dans session_state si elles n'existent pas
    if "rows_to_delete" not in st.session_state:
        st.session_state.rows_to_delete = []

    if "show_confirm_delete" not in st.session_state:
        st.session_state.show_confirm_delete = False
        if "selected_rows" not in st.session_state:
            st.session_state.selected_rows = None

    # V√©rifier si la table contient d√©j√† des donn√©es
    row_count = check_table_empty()
    if row_count == 0:
        st.warning("‚ö†Ô∏è La table est vide. Aucune donn√©e √† modifier.")
        return

    # üìå Charger les donn√©es de la base
    df_existing = load_data_from_database()
    if df_existing is None:
        return
    
    # --- üéõÔ∏è TOGGLE AFFICHAGE FILTRES ---
    with st.sidebar:
        st.markdown("## üîç Filtres")
        show_filters = st.toggle("Afficher les filtres", value=True)

    # Appliquer les filtres uniquement si activ√©s
    if show_filters:
        with st.sidebar:
            noms = st.multiselect("Nom", sorted(df_existing["Nom"].dropna().unique()))
            secteurs = st.multiselect("Code secteur", sorted(df_existing["Code_secteur"].dropna().unique()))
            villes = st.multiselect("Ville", sorted(df_existing["Ville"].dropna().unique()))
            pays = st.multiselect("Pays", sorted(df_existing["Pays"].dropna().unique()))
    else:
        noms, secteurs, villes, pays = [], [], [], []

    # Appliquer les filtres
    filtered_df = df_existing.copy()
    if noms:
        filtered_df = filtered_df[filtered_df["Nom"].isin(noms)]
    if secteurs:
        filtered_df = filtered_df[filtered_df["Code_secteur"].isin(secteurs)]
    if villes:
        filtered_df = filtered_df[filtered_df["Ville"].isin(villes)]
    if pays:
        filtered_df = filtered_df[filtered_df["Pays"].isin(pays)]

    # ‚úÖ Ajouter colonnes de s√©lection et suppression
    filtered_df.insert(0, "S√©lection", False)

    st.subheader("üîπ S√©lectionnez les lignes √† modifier")
    edited_df = st.data_editor(
        filtered_df,
        column_config={
            "S√©lection": st.column_config.CheckboxColumn()
        },
        key="edit_existing",
        use_container_width=True
    )

    selected_rows = edited_df[edited_df["S√©lection"] == True].copy()

    if st.button("üõ†Ô∏èModifier"):

        if selected_rows.empty:
            st.warning("‚ö†Ô∏è Aucune ligne s√©lectionn√©e.")
        else:
            selected_rows.drop(columns=["S√©lection"], inplace=True)
            st.session_state.selected_rows = selected_rows
            st.rerun()  # Red√©marrer pour afficher la zone d'√©dition

    # 1. D√©finir la fonction de dialogue (comme dans l'exemple)
    @st.dialog("Confirmation de suppression")  # D√©corateur pour cr√©er le dialogue
    def confirm_delete_dialog(rows_to_delete):
        st.error(f"‚ö†Ô∏è √ätes-vous s√ªr de vouloir supprimer {len(rows_to_delete)} ligne(s) ?")
        st.write("**Cette action est irr√©versible.**")
        
        col1, col2 = st.columns(2)
        with col1:
            if st.button("‚úÖ Confirmer", type="primary"):
                delete_rows_from_database(rows_to_delete)  # Ta fonction existante
                st.session_state.delete_confirmed = True  # Marquer comme confirm√©
                st.rerun()
        with col2:
            if st.button("‚ùå Annuler"):
                st.rerun()  # Ferme le dialogue sans action

    # 2. Logique principale 
    if st.button("üóëÔ∏è Supprimer"):
        if selected_rows.empty:
            st.warning("‚ö†Ô∏è Aucune ligne s√©lectionn√©e pour suppression.")
        else:
            # Stocker les IDs √† supprimer et ouvrir le dialogue
            st.session_state.rows_to_delete = selected_rows["Code_secteur"].tolist()
            confirm_delete_dialog(st.session_state.rows_to_delete)  # Appel du dialogue

    # 3. Feedback apr√®s confirmation (comme dans l'exemple)
    if st.session_state.get("delete_confirmed"):
        st.success(f"‚úÖ {len(st.session_state.rows_to_delete)} ligne(s) supprim√©e(s) !")
        del st.session_state.delete_confirmed  # Nettoyer l'√©tat
        del st.session_state.rows_to_delete
            
                
    # ‚úÖ Afficher en bas les lignes s√©lectionn√©es si elles existent
    if st.session_state.selected_rows is not None:
        st.divider()
        st.subheader("üìù Modifier les lignes s√©lectionn√©es")
        edited_selection = st.data_editor(
            st.session_state.selected_rows,
            num_rows="dynamic",
            key="edit_selected",
            use_container_width=True
        )

        col1, col2 = st.columns(2)
        with col1:
            if st.button("üíæ Enregistrer les modifications"):
                update_database(edited_selection)
                st.success("‚úÖ Modifications enregistr√©es avec succ√®s.")
                st.session_state.selected_rows = None

        with col2:
            if st.button("üí¢ Annuler la modification"):
                st.session_state.selected_rows = None
                st.info("üîÑ S√©lection annul√©e.")
                st.rerun()

if __name__ == "__main__":
    main()
