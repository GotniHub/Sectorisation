import streamlit as st
import pandas as pd
from db_connection import get_connection
from db_connection import clear_table_RH
from db_connection import check_table_empty  


def load_managers_data(uploaded_file):
    """Charge les donn√©es des managers √† partir d'un fichier Excel avec choix de la feuille."""
    if uploaded_file is not None:
        # Lire le fichier sans sp√©cifier de feuille pour obtenir la liste des feuilles disponibles
        xls = pd.ExcelFile(uploaded_file)
        sheets = xls.sheet_names

        # Afficher un s√©lecteur de feuille
        sheet_name = st.selectbox("üìë Choisissez une feuille :", sheets)

        # Charger la feuille s√©lectionn√©e
        data = pd.read_excel(xls, sheet_name=sheet_name)
                # ‚úÖ Supprimer la premi√®re ligne si elle est identique aux noms de colonnes
        if data.iloc[0].tolist() == list(data.columns):
            data = data.iloc[1:].reset_index(drop=True)
        
        return data
    else:
        return None


def save_to_database(managers):
    """Ins√®re les donn√©es dans la base de donn√©es MySQL."""
    st.write("Appel de get_connection()...")  # DEBUG

    conn = get_connection()
    
    if conn.open == False:
        st.error("‚ùå La connexion MySQL a √©t√© ferm√©e. Recharger la page et r√©essayer.")
        return
    if conn:
        cursor = conn.cursor()
        try:
            # Requ√™te d'insertion SQL
            query = """
                INSERT INTO rh (
                    Code_secteur, Nom, Prenom, Adresse, Code_postal, Ville, Pays, 
                    Nb_heure_par_jour, Nb_jour_terrain_par_an, Nb_nuitees_max_par_an, 
                    Nb_jour_par_semaine, Coef_vitesse, Tolerance,
                    Latitude, Longitude, Nb_visite_max_par_an, Code_DR, Code_DZ, 
                    Type, Temps_max_retour, Cout_KM, Cout_fixe, Cout_Nuitees
                ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
            """
            
            # Conversion des donn√©es en liste de tuples
            data_to_insert = [
                (
                    None if pd.isna(row.get('Code secteur', None)) else row.get('Code secteur', None),
                    None if pd.isna(row.get('Nom', None)) else row.get('Nom', None),
                    None if pd.isna(row.get('Prenom', None)) else row.get('Prenom', None),
                    None if pd.isna(row.get('Adresse', None)) else row.get('Adresse', None),
                    None if pd.isna(row.get('Code postal', None)) else row.get('Code postal', None),
                    None if pd.isna(row.get('Ville', None)) else row.get('Ville', None),
                    None if pd.isna(row.get('Pays', None)) else row.get('Pays', None),
                    None if pd.isna(row.get('Nb heure par jour', None)) else row.get('Nb heure par jour', None),
                    None if pd.isna(row.get('Nb jour terrain par an', None)) else row.get('Nb jour terrain par an', None),
                    None if pd.isna(row.get('Nb nuit√©es max par an', None)) else row.get('Nb nuit√©es max par an', None),
                    None if pd.isna(row.get('Nb jour par semaine', None)) else row.get('Nb jour par semaine', None),
                    None if pd.isna(row.get('Coef vitesse', None)) else row.get('Coef vitesse', None),
                    None if pd.isna(row.get('Tol√©rance', None)) else row.get('Tol√©rance', None),
                    None if pd.isna(row.get('Latitude', None)) else row.get('Latitude', None),
                    None if pd.isna(row.get('Longitude', None)) else row.get('Longitude', None),
                    None if pd.isna(row.get('Nb visite max par an', None)) else row.get('Nb visite max par an', None),
                    None if pd.isna(row.get('Code DR', None)) else row.get('Code DR', None),
                    None if pd.isna(row.get('Code DZ', None)) else row.get('Code DZ', None),
                    None if pd.isna(row.get('Type', None)) else row.get('Type', None),
                    None if pd.isna(row.get('Temps max retour', None)) else row.get('Temps max retour', None),
                    None if pd.isna(row.get('Cout KM', None)) else row.get('Cout KM', None),
                    None if pd.isna(row.get('Cout fixe', None)) else row.get('Cout fixe', None),
                    None if pd.isna(row.get('Cout Nuit√©s', None)) else row.get('Cout Nuit√©s', None)
                )
                for _, row in managers.iterrows()
            ]

            if not data_to_insert:
                st.warning("‚ö†Ô∏è Aucune donn√©e √† ins√©rer !")
                return
            
            # Ex√©cuter l'insertion
            cursor.executemany(query, data_to_insert)
            conn.commit()
            st.success("‚úÖ Donn√©es ins√©r√©es avec succ√®s dans la base de donn√©es !")

        except Exception as e:
            conn.rollback()
            st.error(f"‚ùå Erreur lors de l'insertion des donn√©es : {e}")

        finally:
            if cursor:
                cursor.close()
            if conn and conn.open:  # V√©rifie si la connexion est encore ouverte avant de la fermer
                conn.close()
                print("‚úÖ Connexion ferm√©e avec succ√®s.")  # DEBUG


def main():
    st.title("Charger les donn√©es des Chefs de Secteurs")
    # V√©rifie la connexion et affiche un message
    conn = get_connection()
    if conn:
        st.success("‚úÖüîåConnexion √† la base de donn√©es r√©ussie !")
        conn.close()  # ok ici, c'√©tait juste pour test
        # V√©rifier si la table contient d√©j√† des donn√©es
    row_count = check_table_empty()
    if row_count is not None:
        if row_count > 0:
            st.warning(f"‚ö†Ô∏è La table contient d√©j√† {row_count} enregistrements.")
        else:
            st.warning("‚ö†Ô∏è La table est vide. Vous pouvez importer de nouvelles donn√©es.")
    # Bouton pour t√©l√©charger le template
    with open("CS_Data_Template.xlsx", "rb") as template_file:
        template_data = template_file.read()
    
    st.download_button(
        label="üì•T√©l√©charger le mod√®le de donn√©es (Template CS)",
        data=template_data,
        file_name="CS_Data_Template.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
    if st.button("üóëÔ∏è Vider la table RH"):
        clear_table_RH()
    # Colonnes attendues
    expected_columns = ['Nom', 'Prenom', 'Code secteur', 'Adresse', 'Code postal', 
                        'Ville', 'Pays', 'Nb heure par jour', 'Nb jour terrain par an',
                        'Nb nuit√©es max par an','Nb jour par semaine', 'Coef vitesse','Tol√©rance', 'Latitude', 'Longitude', 
                        'Nb visite max par an', 'Code DR', 'Code DZ', 'Type',
                        'Temps max retour', 'Cout KM', 'Cout fixe', 'Cout Nuit√©s']

    # T√©l√©chargement du fichier Excel
    uploaded_managers = st.file_uploader("üìÇ Importer le fichier Excel pour les chefs de secteurs (CS Data)", type=["xlsx"])
    
    if uploaded_managers is not None:
        managers = load_managers_data(uploaded_managers)
        
        if managers is not None:
            st.write("### V√©rification des colonnes import√©es")
            col1, col2 = st.columns(2)

            with col1:
                st.write("**Colonnes import√©es**")
                imported_columns = managers.columns.tolist()
                for col in imported_columns:
                    if col in expected_columns:
                        st.write(f"‚úîÔ∏è {col}")  
                    else:
                        st.write(f"‚ùå {col}")  

            with col2:
                st.write("**Colonnes attendues (template)**")
                for col in expected_columns:
                    if col in imported_columns:
                        st.write(f"‚úîÔ∏è {col}")  
                    else:
                        st.write(f"‚ùå {col}")  

            # V√©rifier si toutes les colonnes attendues sont pr√©sentes
            if set(expected_columns).issubset(set(imported_columns)):
                st.success("‚úÖ Toutes les colonnes correspondent √† la template!")

                if not managers.empty:
                    # Transformer les donn√©es en DataFrame avant insertion
                    df_to_insert = pd.DataFrame(managers)

                    # Afficher un aper√ßu du tableau
                    st.write("üìå Aper√ßu des donn√©es √† ins√©rer :")
                    st.dataframe(df_to_insert)

                if st.button("Valider et stocker les donn√©es"):
                    save_to_database(managers)
                    # V√©rifier la table apr√®s l'insertion
                    row_count = check_table_empty()
                    if row_count is not None:
                        st.info(f"‚ÑπÔ∏è La table contient maintenant {row_count} enregistrements.")
                            # üîÑ Recharger les donn√©es depuis la base pour les afficher
                    conn = get_connection()
                    if conn:
                        df_rh = pd.read_sql("SELECT * FROM rh", conn)
                        conn.close()

                        st.success("‚úÖ Voici les donn√©es d√©sormais stock√©es dans la base RH :")
                        st.dataframe(df_rh)
            else:
                st.error("‚ùå Les colonnes import√©es ne correspondent pas √† la template.")
                missing_columns = set(expected_columns) - set(imported_columns)
                if missing_columns:
                    st.write("Colonnes manquantes :")
                    for col in missing_columns:
                        st.write(f"- {col}")
        else:
            st.error("Erreur lors du chargement des donn√©es.")
    else:
        st.info("Veuillez t√©l√©charger un fichier Excel pour afficher les donn√©es.")

if __name__ == "__main__":
    main()
