
import streamlit as st
import pymysql


def get_connection():
    try:
        print("Tentative de connexion √† MySQL...")  # DEBUG
        conn = pymysql.connect(
            host="localhost",
            user="root",
            password="",  # XAMPP n'a pas de mot de passe par d√©faut
            database="secto",
            port=3306
        )
        print("‚úÖ Connexion r√©ussie !")  # DEBUG
        return conn
    except pymysql.Error as err:
        print(f"‚ùå ERREUR MYSQL : {err}")  # DEBUG
        st.error(f"‚ùå Erreur de connexion MySQL : {err}")
        return None
    except Exception as e:
        print(f"‚ùå ERREUR INATTENDUE : {e}")  # DEBUG
        st.error(f"‚ùå Erreur inattendue : {e}")
        return None
    
  
def clear_table_RH():
    """Vide la table 'rh' en supprimant toutes les donn√©es."""
    conn = get_connection()
    if not conn:
        st.error("‚ùå Impossible de se connecter √† la base de donn√©es.")
        return
    
    st.write("üìå Connexion MySQL √©tablie :", conn)  # DEBUG

    cursor = conn.cursor()

    with conn.cursor() as cursor: 
        try:
            st.write("üî¥ D√©sactivation des cl√©s √©trang√®res...")  # DEBUG
            cursor.execute("SET FOREIGN_KEY_CHECKS = 0;")
            
            st.write("üî¥ Suppression des donn√©es...")  # DEBUG
            cursor.execute("DELETE FROM rh;")
            conn.commit()
            
            st.write(f"‚úÖ Suppression effectu√©e. {cursor.rowcount} lignes supprim√©es.")
            
            cursor.execute("SET FOREIGN_KEY_CHECKS = 1;")  # R√©activer les cl√©s
            st.success("‚úÖ La table 'rh' a √©t√© vid√©e avec succ√®s !")

        except Exception as e:
            if conn.open:  # ‚úÖ V√©rifie si la connexion est encore ouverte avant d'ex√©cuter rollback
                conn.rollback()
            st.error(f"‚ùå Erreur lors de la suppression des donn√©es : {e}")
    
        finally:
            cursor.close()

# if st.button("üóëÔ∏è Vider la table RH"):
#     clear_table()
def clear_table_PDV():
    """Vide la table 'rh' en supprimant toutes les donn√©es."""
    conn = get_connection()
    if not conn:
        st.error("‚ùå Impossible de se connecter √† la base de donn√©es.")
        return
    
    st.write("üìå Connexion MySQL √©tablie :", conn)  # DEBUG

    cursor = conn.cursor()

    with conn.cursor() as cursor: 
        try:
            st.write("üî¥ D√©sactivation des cl√©s √©trang√®res...")  # DEBUG
            cursor.execute("SET FOREIGN_KEY_CHECKS = 0;")
            
            st.write("üî¥ Suppression des donn√©es...")  # DEBUG
            cursor.execute("DELETE FROM pdv;")
            conn.commit()
            
            st.write(f"‚úÖ Suppression effectu√©e. {cursor.rowcount} lignes supprim√©es.")
            
            cursor.execute("SET FOREIGN_KEY_CHECKS = 1;")  # R√©activer les cl√©s
            st.success("‚úÖ La table 'pdv' a √©t√© vid√©e avec succ√®s !")

        except Exception as e:
            if conn.open:  # ‚úÖ V√©rifie si la connexion est encore ouverte avant d'ex√©cuter rollback
                conn.rollback()
            st.error(f"‚ùå Erreur lors de la suppression des donn√©es : {e}")
    
        finally:
            cursor.close()

def check_table_empty(table_name="rh"):
    """V√©rifie si la table sp√©cifi√©e contient des donn√©es."""
    conn = get_connection()
    if not conn:
        st.error("‚ùå Impossible de se connecter √† la base de donn√©es.")
        return None

    cursor = conn.cursor()
    
    try:
        query = f"SELECT COUNT(*) FROM {table_name};"
        cursor.execute(query)
        row_count = cursor.fetchone()[0]
        return row_count
    except Exception as e:
        st.error(f"‚ùå Erreur lors de la v√©rification de la table '{table_name}' : {e}")
        return None
    finally:
        cursor.close()
        conn.close()


def update_database(df_selected):
    """Met √† jour les lignes modifi√©es dans MySQL."""
    conn = get_connection()
    if conn:
        cursor = conn.cursor()
        try:
            for _, row in df_selected.iterrows():
                query = """
                    UPDATE rh SET 
                        Nom = %s, Prenom = %s, Adresse = %s, Code_postal = %s, Ville = %s, Pays = %s,
                        Nb_heure_par_jour = %s, Nb_jour_terrain_par_an = %s, Nb_nuitees_max_par_an = %s,
                        Nb_jour_par_semaine = %s, Coef_vitesse = %s, Tolerance = %s,
                        Latitude = %s, Longitude = %s, Nb_visite_max_par_an = %s, 
                        Code_DR = %s, Code_DZ = %s, Type = %s, Temps_max_retour = %s, 
                        Cout_KM = %s, Cout_fixe = %s, Cout_Nuitees = %s
                    WHERE Code_secteur = %s
                """
                cursor.execute(query, (
                    row["Nom"], row["Prenom"], row["Adresse"], row["Code_postal"], row["Ville"], row["Pays"],
                    row["Nb_heure_par_jour"], row["Nb_jour_terrain_par_an"], row["Nb_nuitees_max_par_an"],
                    row["Nb_jour_par_semaine"], row["Coef_vitesse"], row["Tolerance"],
                    row["Latitude"], row["Longitude"], row["Nb_visite_max_par_an"],
                    row["Code_DR"], row["Code_DZ"], row["Type"], row["Temps_max_retour"],
                    row["Cout_KM"], row["Cout_fixe"], row["Cout_Nuitees"], row["Code_secteur"]
                ))
            conn.commit()
            st.success("‚úÖ Donn√©es mises √† jour avec succ√®s !")
        except Exception as e:
            conn.rollback()
            st.error(f"‚ùå Erreur lors de la mise √† jour : {e}")
        finally:
            cursor.close()
            conn.close()

